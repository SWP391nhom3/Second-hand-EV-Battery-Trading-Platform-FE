import React, { useState } from "react";
import {
  Modal,
  Form,
  Input,
  InputNumber,
  Select,
  Upload,
  Button,
  Row,
  Col,
  Space,
  message,
  Steps,
  Radio,
  Divider,
  Tag,
  Progress,
} from "antd";
import {
  PlusOutlined,
  InboxOutlined,
  CheckCircleOutlined,
  EnvironmentOutlined,
  DollarOutlined,
  FileTextOutlined,
  CameraOutlined,
} from "@ant-design/icons";
import styles from "./CreatePostModal.module.css";

const { TextArea } = Input;
const { Option } = Select;
const { Dragger } = Upload;
const { Step } = Steps;

const CreatePostModal = ({ visible, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [currentStep, setCurrentStep] = useState(0);
  const [fileList, setFileList] = useState([]);
  const [loading, setLoading] = useState(false);
  const [postType, setPostType] = useState("sell");

  // Danh s√°ch th∆∞∆°ng hi·ªáu pin ph·ªï bi·∫øn
  const batteryBrands = [
    "Tesla",
    "BYD",
    "CATL",
    "LG Chem",
    "Panasonic",
    "Samsung SDI",
    "SK Innovation",
    "AESC",
    "Northvolt",
    "Kh√°c",
  ];

  // T√¨nh tr·∫°ng pin
  const batteryConditions = [
    { value: "new", label: "M·ªõi 100%" },
    { value: "like-new", label: "Nh∆∞ m·ªõi (>95%)" },
    { value: "excellent", label: "Xu·∫•t s·∫Øc (90-95%)" },
    { value: "good", label: "T·ªët (80-90%)" },
    { value: "fair", label: "Kh√° (70-80%)" },
    { value: "used", label: "ƒê√£ qua s·ª≠ d·ª•ng (<70%)" },
  ];

  // Th√†nh ph·ªë
  const cities = [
    "H√† N·ªôi",
    "TP. H·ªì Ch√≠ Minh",
    "ƒê√† N·∫µng",
    "H·∫£i Ph√≤ng",
    "C·∫ßn Th∆°",
    "Bi√™n H√≤a",
    "Nha Trang",
    "Hu·∫ø",
    "V≈©ng T√†u",
    "Kh√°c",
  ];

  const handleUploadChange = ({ fileList: newFileList }) => {
    setFileList(newFileList);
  };

  const uploadProps = {
    name: "file",
    multiple: true,
    listType: "picture-card",
    fileList: fileList,
    onChange: handleUploadChange,
    beforeUpload: (file) => {
      const isImage = file.type.startsWith("image/");
      if (!isImage) {
        message.error("Ch·ªâ ƒë∆∞·ª£c upload file ·∫£nh!");
        return Upload.LIST_IGNORE;
      }
      const isLt5M = file.size / 1024 / 1024 < 5;
      if (!isLt5M) {
        message.error("·∫¢nh ph·∫£i nh·ªè h∆°n 5MB!");
        return Upload.LIST_IGNORE;
      }
      return false; // Prevent auto upload
    },
    onRemove: (file) => {
      const index = fileList.indexOf(file);
      const newFileList = fileList.slice();
      newFileList.splice(index, 1);
      setFileList(newFileList);
    },
  };

  const steps = [
    {
      title: "Lo·∫°i tin",
      icon: <FileTextOutlined />,
    },
    {
      title: "Th√¥ng tin",
      icon: <DollarOutlined />,
    },
    {
      title: "H√¨nh ·∫£nh",
      icon: <CameraOutlined />,
    },
    {
      title: "X√°c nh·∫≠n",
      icon: <CheckCircleOutlined />,
    },
  ];

  const handleNext = async () => {
    try {
      // Validate current step fields
      if (currentStep === 0) {
        await form.validateFields(["postType", "title"]);
      } else if (currentStep === 1) {
        await form.validateFields([
          "brand",
          "capacity",
          "condition",
          "price",
          "city",
          "description",
        ]);
      } else if (currentStep === 2) {
        if (fileList.length === 0) {
          message.warning("Vui l√≤ng upload √≠t nh·∫•t 1 ·∫£nh!");
          return;
        }
      }
      setCurrentStep(currentStep + 1);
    } catch (error) {
      console.log("Validation failed:", error);
    }
  };

  const handlePrevious = () => {
    setCurrentStep(currentStep - 1);
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      const values = await form.validateFields();

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      message.success("ƒêƒÉng tin th√†nh c√¥ng!");
      form.resetFields();
      setFileList([]);
      setCurrentStep(0);
      onSuccess && onSuccess();
      onCancel();
    } catch (error) {
      message.error("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    // Reset form v√† ƒë√≥ng modal tr·ª±c ti·∫øp
    form.resetFields();
    setFileList([]);
    setCurrentStep(0);
    setPostType("sell");
    
    // G·ªçi callback ƒë·ªÉ ƒë√≥ng modal
    if (onCancel) {
      onCancel();
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className={styles.stepContent}>
            <h3 className={styles.stepTitle}>B·∫°n mu·ªën ƒëƒÉng tin g√¨?</h3>
            <Form.Item
              name="postType"
              rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i tin!" }]}
            >
              <Radio.Group
                value={postType}
                onChange={(e) => setPostType(e.target.value)}
                className={styles.radioGroup}
              >
                <Radio.Button value="sell" className={styles.radioButton}>
                  <Space direction="vertical" align="center">
                    <DollarOutlined style={{ fontSize: 32 }} />
                    <span>B√°n pin EV</span>
                    <small>ƒêƒÉng tin b√°n pin xe ƒëi·ªán</small>
                  </Space>
                </Radio.Button>
                <Radio.Button value="motorcycle" className={styles.radioButton}>
                  <Space direction="vertical" align="center">
                    <InboxOutlined style={{ fontSize: 32 }} />
                    <span>B√°n xe m√°y ƒëi·ªán</span>
                    <small>ƒêƒÉng tin b√°n xe m√°y ƒëi·ªán</small>
                  </Space>
                </Radio.Button>
                <Radio.Button value="car" className={styles.radioButton}>
                  <Space direction="vertical" align="center">
                    <InboxOutlined style={{ fontSize: 32 }} />
                    <span>B√°n xe √¥ t√¥ ƒëi·ªán</span>
                    <small>ƒêƒÉng tin b√°n xe √¥ t√¥ ƒëi·ªán</small>
                  </Space>
                </Radio.Button>
              </Radio.Group>
            </Form.Item>

            <Divider />

            <Form.Item
              name="title"
              label="Ti√™u ƒë·ªÅ tin ƒëƒÉng"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!" },
                { min: 10, message: "Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±!" },
                { max: 100, message: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±!" },
              ]}
            >
              <Input
                placeholder={
                  postType === "sell"
                    ? "VD: B√°n pin Tesla 75kWh, t√¨nh tr·∫°ng t·ªët, gi√° h·ª£p l√Ω"
                    : postType === "motorcycle"
                    ? "VD: B√°n xe m√°y ƒëi·ªán VinFast Klara S, m·ªõi 95%, ƒëi 3000km"
                    : "VD: B√°n xe √¥ t√¥ ƒëi·ªán VinFast VF8, nƒÉm 2024, full options"
                }
                size="large"
                showCount
                maxLength={100}
              />
            </Form.Item>

            <div className={styles.tips}>
              <h4>üí° M·∫πo vi·∫øt ti√™u ƒë·ªÅ t·ªët:</h4>
              <ul>
                {postType === "sell" ? (
                  <>
                    <li>N√™u r√µ th∆∞∆°ng hi·ªáu v√† dung l∆∞·ª£ng pin</li>
                    <li>Ghi r√µ t√¨nh tr·∫°ng v√† m·ª©c gi√°</li>
                  </>
                ) : (
                  <>
                    <li>N√™u r√µ h√£ng xe v√† model</li>
                    <li>Ghi r√µ nƒÉm s·∫£n xu·∫•t v√† s·ªë km ƒë√£ ƒëi</li>
                    <li>N√™u r√µ t√¨nh tr·∫°ng xe v√† gi√° b√°n</li>
                  </>
                )}
                <li>Tr√°nh vi·∫øt HOA to√†n b·ªô ho·∫∑c d√πng k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
              </ul>
            </div>
          </div>
        );

      case 1:
        return (
          <div className={styles.stepContent}>
            <h3 className={styles.stepTitle}>Th√¥ng tin chi ti·∫øt</h3>
            <Row gutter={[16, 16]}>
              <Col xs={24} md={12}>
                <Form.Item
                  name="brand"
                  label="Th∆∞∆°ng hi·ªáu"
                  rules={[
                    { required: true, message: "Vui l√≤ng ch·ªçn th∆∞∆°ng hi·ªáu!" },
                  ]}
                >
                  <Select placeholder="Ch·ªçn th∆∞∆°ng hi·ªáu" size="large">
                    {batteryBrands.map((brand) => (
                      <Option key={brand} value={brand}>
                        {brand}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  name="capacity"
                  label="Dung l∆∞·ª£ng (kWh)"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p dung l∆∞·ª£ng!" },
                  ]}
                >
                  <InputNumber
                    placeholder="VD: 75"
                    size="large"
                    min={10}
                    max={200}
                    style={{ width: "100%" }}
                    addonAfter="kWh"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  name="condition"
                  label="T√¨nh tr·∫°ng"
                  rules={[
                    { required: true, message: "Vui l√≤ng ch·ªçn t√¨nh tr·∫°ng!" },
                  ]}
                >
                  <Select placeholder="Ch·ªçn t√¨nh tr·∫°ng" size="large">
                    {batteryConditions.map((condition) => (
                      <Option key={condition.value} value={condition.value}>
                        {condition.label}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  name="price"
                  label="Gi√° (VNƒê)"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p gi√°!" }]}
                >
                  <InputNumber
                    placeholder="VD: 50000000"
                    size="large"
                    min={0}
                    style={{ width: "100%" }}
                    formatter={(value) =>
                      `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                    }
                    parser={(value) => value.replace(/\$\s?|(,*)/g, "")}
                    addonAfter="VNƒê"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  name="warranty"
                  label="B·∫£o h√†nh (th√°ng)"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p th·ªùi gian b·∫£o h√†nh!" },
                  ]}
                >
                  <InputNumber
                    placeholder="VD: 12"
                    size="large"
                    min={0}
                    max={120}
                    style={{ width: "100%" }}
                    addonAfter="th√°ng"
                  />
                </Form.Item>
              </Col>

              <Col xs={24} md={12}>
                <Form.Item
                  name="city"
                  label="Th√†nh ph·ªë"
                  rules={[
                    { required: true, message: "Vui l√≤ng ch·ªçn th√†nh ph·ªë!" },
                  ]}
                >
                  <Select
                    placeholder="Ch·ªçn th√†nh ph·ªë"
                    size="large"
                    suffixIcon={<EnvironmentOutlined />}
                  >
                    {cities.map((city) => (
                      <Option key={city} value={city}>
                        {city}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col xs={24}>
                <Form.Item
                  name="description"
                  label="M√¥ t·∫£ chi ti·∫øt"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£!" },
                    { min: 50, message: "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 50 k√Ω t·ª±!" },
                  ]}
                >
                  <TextArea
                    rows={6}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ pin: l·ªãch s·ª≠ s·ª≠ d·ª•ng, t√¨nh tr·∫°ng, l√Ω do b√°n..."
                    showCount
                    maxLength={1000}
                  />
                </Form.Item>
              </Col>

              <Col xs={24}>
                <Form.Item
                  name="advantages"
                  label="∆Øu ƒëi·ªÉm"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p ∆∞u ƒëi·ªÉm!" },
                    { min: 20, message: "∆Øu ƒëi·ªÉm ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±!" },
                  ]}
                >
                  <TextArea
                    rows={4}
                    placeholder="VD: Pin c√≤n m·ªõi 90%, dung l∆∞·ª£ng t·ªët, s·∫°c nhanh, ƒë√£ b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥..."
                    showCount
                    maxLength={500}
                  />
                </Form.Item>
              </Col>

              <Col xs={24}>
                <Form.Item
                  name="detailedInfo"
                  label="Th√¥ng tin chi ti·∫øt"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p th√¥ng tin chi ti·∫øt!" },
                    { min: 30, message: "Th√¥ng tin chi ti·∫øt ph·∫£i c√≥ √≠t nh·∫•t 30 k√Ω t·ª±!" },
                  ]}
                >
                  <TextArea
                    rows={5}
                    placeholder="VD: NƒÉm s·∫£n xu·∫•t, s·ªë l·∫ßn s·∫°c, l·ªãch s·ª≠ b·∫£o d∆∞·ª°ng, c√°c linh ki·ªán ƒëi k√®m..."
                    showCount
                    maxLength={800}
                  />
                </Form.Item>
              </Col>

              <Col xs={24}>
                <Form.Item
                  name="policy"
                  label="Ch√≠nh s√°ch"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p ch√≠nh s√°ch!" },
                    { min: 20, message: "Ch√≠nh s√°ch ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±!" },
                  ]}
                >
                  <TextArea
                    rows={4}
                    placeholder="VD: H·ªó tr·ª£ ƒë·ªïi tr·∫£ trong 7 ng√†y, b·∫£o h√†nh 12 th√°ng, giao h√†ng t·∫≠n n∆°i..."
                    showCount
                    maxLength={500}
                  />
                </Form.Item>
              </Col>
            </Row>
          </div>
        );

      case 2:
        return (
          <div className={styles.stepContent}>
            <h3 className={styles.stepTitle}>Upload h√¨nh ·∫£nh</h3>
            <p className={styles.stepDescription}>
              Th√™m √≠t nh·∫•t 1 ·∫£nh ƒë·ªÉ tin ƒëƒÉng c·ªßa b·∫°n thu h√∫t h∆°n (t·ªëi ƒëa 6 ·∫£nh)
            </p>

            <Dragger {...uploadProps} className={styles.uploader}>
              {fileList.length < 6 && (
                <div className={styles.uploadArea}>
                  <p className="ant-upload-drag-icon">
                    <CameraOutlined style={{ fontSize: 48, color: "#1890ff" }} />
                  </p>
                  <p className="ant-upload-text">
                    K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn
                  </p>
                  <p className="ant-upload-hint">
                    H·ªó tr·ª£: JPG, PNG, GIF (t·ªëi ƒëa 5MB/·∫£nh)
                  </p>
                </div>
              )}
            </Dragger>

            <div className={styles.uploadProgress}>
              <Progress
                percent={Math.round((fileList.length / 6) * 100)}
                status={fileList.length >= 6 ? "success" : "active"}
                format={() => `${fileList.length}/6 ·∫£nh`}
              />
            </div>

            <div className={styles.tips}>
              <h4>üì∏ M·∫πo ch·ª•p ·∫£nh t·ªët:</h4>
              <ul>
                <li>Ch·ª•p r√µ nh√£n m√°c, s·ªë serial c·ªßa pin</li>
                <li>Ch·ª•p to√†n c·∫£nh v√† c√°c g√≥c chi ti·∫øt</li>
                <li>√Ånh s√°ng t·ªët, kh√¥ng b·ªã m·ªù ho·∫∑c nh√≤e</li>
                <li>Tr√°nh ch·ª•p ·∫£nh c√≥ ch·ª©a th√¥ng tin c√° nh√¢n</li>
              </ul>
            </div>
          </div>
        );

      case 3:
        return (
          <div className={styles.stepContent}>
            <h3 className={styles.stepTitle}>X√°c nh·∫≠n th√¥ng tin</h3>
            <div className={styles.confirmContent}>
              <div className={styles.confirmSection}>
                <h4>
                  <FileTextOutlined /> Lo·∫°i tin
                </h4>
                <Tag 
                  color={postType === "sell" ? "green" : postType === "motorcycle" ? "blue" : "purple"} 
                  style={{ fontSize: 14 }}
                >
                  {postType === "sell" ? "B√°n pin EV" : postType === "motorcycle" ? "B√°n xe m√°y ƒëi·ªán" : "B√°n xe √¥ t√¥ ƒëi·ªán"}
                </Tag>
              </div>

              <div className={styles.confirmSection}>
                <h4>
                  <DollarOutlined /> Ti√™u ƒë·ªÅ
                </h4>
                <p>{form.getFieldValue("title")}</p>
              </div>

              <div className={styles.confirmSection}>
                <h4>Th√¥ng tin s·∫£n ph·∫©m</h4>
                <Row gutter={[16, 8]}>
                  <Col span={12}>
                    <strong>Th∆∞∆°ng hi·ªáu:</strong> {form.getFieldValue("brand")}
                  </Col>
                  <Col span={12}>
                    <strong>Dung l∆∞·ª£ng:</strong> {form.getFieldValue("capacity")} kWh
                  </Col>
                  <Col span={12}>
                    <strong>T√¨nh tr·∫°ng:</strong>{" "}
                    {
                      batteryConditions.find(
                        (c) => c.value === form.getFieldValue("condition")
                      )?.label
                    }
                  </Col>
                  <Col span={12}>
                    <strong>Gi√°:</strong>{" "}
                    {form.getFieldValue("price")?.toLocaleString("vi-VN")} VNƒê
                  </Col>
                  <Col span={12}>
                    <strong>B·∫£o h√†nh:</strong> {form.getFieldValue("warranty")} th√°ng
                  </Col>
                  <Col span={12}>
                    <strong>ƒê·ªãa ƒëi·ªÉm:</strong> {form.getFieldValue("city")}
                  </Col>
                </Row>
              </div>

              <div className={styles.confirmSection}>
                <h4>üìù M√¥ t·∫£ chi ti·∫øt</h4>
                <p style={{ whiteSpace: "pre-wrap" }}>{form.getFieldValue("description")}</p>
              </div>

              <div className={styles.confirmSection}>
                <h4>‚≠ê ∆Øu ƒëi·ªÉm</h4>
                <p style={{ whiteSpace: "pre-wrap" }}>{form.getFieldValue("advantages")}</p>
              </div>

              <div className={styles.confirmSection}>
                <h4>‚ÑπÔ∏è Th√¥ng tin chi ti·∫øt</h4>
                <p style={{ whiteSpace: "pre-wrap" }}>{form.getFieldValue("detailedInfo")}</p>
              </div>

              <div className={styles.confirmSection}>
                <h4>üìã Ch√≠nh s√°ch</h4>
                <p style={{ whiteSpace: "pre-wrap" }}>{form.getFieldValue("policy")}</p>
              </div>

              <div className={styles.confirmSection}>
                <h4>
                  <CameraOutlined /> H√¨nh ·∫£nh
                </h4>
                <p>{fileList.length} ·∫£nh ƒë√£ upload</p>
              </div>

              <div className={styles.confirmNote}>
                <CheckCircleOutlined /> Sau khi ƒëƒÉng tin, b√†i vi·∫øt s·∫Ω ƒë∆∞·ª£c ki·ªÉm duy·ªát
                trong v√≤ng 24 gi·ªù
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Modal
      title={
        <div className={styles.modalHeader}>
          <h2>
            <PlusOutlined /> ƒêƒÉng tin m·ªõi
          </h2>
          <p>Chia s·∫ª th√¥ng tin pin EV c·ªßa b·∫°n v·ªõi c·ªông ƒë·ªìng</p>
        </div>
      }
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={800}
      className={styles.createPostModal}
      destroyOnClose
    >
      <div className={styles.modalContent}>
        <Steps current={currentStep} className={styles.steps}>
          {steps.map((item, index) => (
            <Step key={index} title={item.title} icon={item.icon} />
          ))}
        </Steps>

        <Form
          form={form}
          layout="vertical"
          initialValues={{ postType: "sell" }}
          className={styles.form}
        >
          {renderStepContent()}
        </Form>

        <div className={styles.modalFooter}>
          {currentStep > 0 && (
            <Button size="large" onClick={handlePrevious}>
              Quay l·∫°i
            </Button>
          )}
          <Space>
            <Button size="large" onClick={handleCancel}>
              H·ªßy
            </Button>
            {currentStep < steps.length - 1 && (
              <Button type="primary" size="large" onClick={handleNext}>
                Ti·∫øp t·ª•c
              </Button>
            )}
            {currentStep === steps.length - 1 && (
              <Button
                type="primary"
                size="large"
                onClick={handleSubmit}
                loading={loading}
                icon={<CheckCircleOutlined />}
              >
                ƒêƒÉng tin ngay
              </Button>
            )}
          </Space>
        </div>
      </div>
    </Modal>
  );
};

export default CreatePostModal;
