import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Row,
  Col,
  Card,
  Button,
  InputNumber,
  Tag,
  Rate,
  Divider,
  Tabs,
  Table,
  Image,
  Space,
  Typography,
  Avatar,
  Progress,
  List,
  Breadcrumb,
} from 'antd';
import {
  ShoppingCartOutlined,
  HeartOutlined,
  ShareAltOutlined,
  SafetyOutlined,
  ThunderboltOutlined,
  CheckCircleOutlined,
  HomeOutlined,
  UserOutlined,
} from '@ant-design/icons';
import styles from './ProductDetailPage.module.css';

const { Title, Text, Paragraph } = Typography;
const { TabPane } = Tabs;

const ProductDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [quantity, setQuantity] = useState(1);
  const [selectedImage, setSelectedImage] = useState(0);

  // Mock data - trong th·ª±c t·∫ø s·∫Ω fetch t·ª´ API d·ª±a tr√™n id
  const product = {
    id: id,
    name: 'Pin Tesla Model S 85kWh',
    brand: 'Tesla',
    price: 240000000,
    originalPrice: 360000000,
    rating: 4.8,
    reviews: 156,
    sold: 89,
    inStock: true,
    stockQuantity: 15,
    membershipLevel: 4,
    tag: 'Kim c∆∞∆°ng',
    images: [
      'https://images.unsplash.com/photo-1593941707882-a5bba14938c7?w=800',
      'https://images.unsplash.com/photo-1617788138017-80ad40651399?w=800',
      'https://images.unsplash.com/photo-1617788138058-1e97ae4b5aef?w=800',
      'https://images.unsplash.com/photo-1612538498613-76d10ae0c237?w=800',
    ],
    description: `Pin Tesla Model S 85kWh l√† gi·∫£i ph√°p nƒÉng l∆∞·ª£ng cao c·∫•p, ƒë∆∞·ª£c t√°i ch·∫ø t·ª´ xe Tesla Model S ƒë·ªùi 2018-2020. 
    Pin ƒë√£ qua ki·ªÉm tra k·ªπ l∆∞·ª°ng v√† v·∫´n gi·ªØ ƒë∆∞·ª£c 92% dung l∆∞·ª£ng ban ƒë·∫ßu, ƒë·∫£m b·∫£o hi·ªáu su·∫•t t·ªëi ∆∞u cho nhu c·∫ßu s·ª≠ d·ª•ng c·ªßa b·∫°n.`,
    
    specifications: {
      capacity: '85 kWh',
      voltage: '375V',
      current: '227A',
      cellType: 'Li-ion 18650',
      weight: '540 kg',
      dimensions: '2100 x 1200 x 150 mm',
      cycleLife: '3000+ chu k·ª≥',
      warranty: '24 th√°ng',
      condition: 'Nh∆∞ m·ªõi',
      healthStatus: '92%',
      yearManufactured: '2019',
      certification: 'CE, UL, UN38.3',
    },

    features: [
      'Dung l∆∞·ª£ng cao 85kWh ph√π h·ª£p cho nhi·ªÅu ·ª©ng d·ª•ng',
      'ƒê·ªô s·ª©c kh·ªèe pin 92% ƒë∆∞·ª£c ch·ª©ng nh·∫≠n',
      'H·ªá th·ªëng BMS (Battery Management System) t√≠ch h·ª£p',
      'B·∫£o h√†nh ch√≠nh h√£ng 24 th√°ng',
      'ƒê√£ qua ki·ªÉm tra an to√†n nghi√™m ng·∫∑t',
      'H·ªó tr·ª£ l·∫Øp ƒë·∫∑t v√† t∆∞ v·∫•n k·ªπ thu·∫≠t mi·ªÖn ph√≠',
      'Ch·ª©ng nh·∫≠n ch·∫•t l∆∞·ª£ng qu·ªëc t·∫ø',
      'C√≥ th·ªÉ k·∫øt n·ªëi song song ƒë·ªÉ tƒÉng dung l∆∞·ª£ng',
    ],

    applications: [
      'H·ªá th·ªëng l∆∞u tr·ªØ nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi (Solar ESS)',
      'Tr·∫°m s·∫°c xe ƒëi·ªán c√¥ng su·∫•t cao',
      'Ngu·ªìn ƒëi·ªán d·ª± ph√≤ng cho doanh nghi·ªáp',
      'H·ªá th·ªëng ƒëi·ªán ƒë·ªôc l·∫≠p (Off-grid)',
      'Xe ƒëi·ªán v√† xe bu√Ωt ƒëi·ªán',
      'T√†u thuy·ªÅn v√† du thuy·ªÅn ƒëi·ªán',
    ],

    seller: {
      name: 'Green Energy Solutions',
      rating: 4.9,
      responseRate: '98%',
      responseTime: '2 gi·ªù',
      followers: 2453,
      products: 87,
      joinDate: 'Th√°ng 3, 2023',
      verified: true,
    },

    warranty: {
      period: '24 th√°ng',
      coverage: [
        'B·∫£o h√†nh ch·∫•t l∆∞·ª£ng pin',
        'Thay th·∫ø mi·ªÖn ph√≠ n·∫øu l·ªói nh√† s·∫£n xu·∫•t',
        'H·ªó tr·ª£ k·ªπ thu·∫≠t 24/7',
        'Ki·ªÉm tra v√† b·∫£o d∆∞·ª°ng ƒë·ªãnh k·ª≥',
      ],
      notCovered: [
        'H∆∞ h·ªèng do s·ª≠ d·ª•ng sai c√°ch',
        'Thi·ªát h·∫°i do thi√™n tai',
        'T·ª± √Ω s·ª≠a ch·ªØa, thay ƒë·ªïi',
      ],
    },

    shipping: {
      freeShipping: true,
      estimatedDays: '3-5 ng√†y',
      shippingFrom: 'TP. H·ªì Ch√≠ Minh',
      methods: [
        'Giao h√†ng ti√™u chu·∫©n (3-5 ng√†y)',
        'Giao h√†ng nhanh (1-2 ng√†y) +500.000‚Ç´',
        'Nh·∫≠n t·∫°i kho (Mi·ªÖn ph√≠)',
      ],
    },

    reviews: [
      {
        id: 1,
        userName: 'Nguy·ªÖn VƒÉn A',
        rating: 5,
        date: '15/10/2024',
        content: 'Pin ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, ƒë√∫ng nh∆∞ m√¥ t·∫£. Dung l∆∞·ª£ng v·∫´n r·∫•t t·ªët, ƒë√£ l·∫Øp v√†o h·ªá th·ªëng solar c·ªßa nh√† v√† ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh.',
        images: ['https://via.placeholder.com/100'],
        helpful: 24,
      },
      {
        id: 2,
        userName: 'Tr·∫ßn Th·ªã B',
        rating: 4,
        date: '10/10/2024',
        content: 'S·∫£n ph·∫©m t·ªët, giao h√†ng nhanh. Nh√¢n vi√™n h·ªó tr·ª£ l·∫Øp ƒë·∫∑t r·∫•t nhi·ªát t√¨nh.',
        helpful: 15,
      },
      {
        id: 3,
        userName: 'L√™ VƒÉn C',
        rating: 5,
        date: '05/10/2024',
        content: 'Mua l·∫ßn 2 r·ªìi, ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh. Gi√° c·∫£ h·ª£p l√Ω so v·ªõi th·ªã tr∆∞·ªùng.',
        helpful: 18,
      },
    ],

    relatedProducts: [
      {
        id: 2,
        name: 'Pin Tesla Model 3 75kWh',
        price: 216000000,
        image: 'https://images.unsplash.com/photo-1593941707882-a5bba14938c7?w=400',
        rating: 4.7,
      },
      {
        id: 3,
        name: 'Pin Nissan Leaf 40kWh',
        price: 120000000,
        image: 'https://images.unsplash.com/photo-1617788138017-80ad40651399?w=400',
        rating: 4.5,
      },
    ],
  };

  const getMembershipInfo = (level) => {
    switch (level) {
      case 4:
        return { color: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', icon: 'üíé', label: 'Kim c∆∞∆°ng' };
      case 3:
        return { color: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', icon: 'ü•á', label: 'V√†ng' };
      case 2:
        return { color: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)', icon: 'ü•à', label: 'B·∫°c' };
      case 1:
        return { color: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)', icon: 'ü•â', label: 'ƒê·ªìng' };
      default:
        return { color: '#f0f0f0', icon: '', label: '' };
    }
  };

  const membershipInfo = getMembershipInfo(product.membershipLevel);
  const discount = Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100);

  const handleAddToCart = () => {
    console.log('Th√™m v√†o gi·ªè h√†ng:', { productId: id, quantity });
  };

  const handleBuyNow = () => {
    console.log('Mua ngay:', { productId: id, quantity });
  };

  const specColumns = [
    {
      title: 'Th√¥ng s·ªë',
      dataIndex: 'label',
      key: 'label',
      width: '40%',
    },
    {
      title: 'Gi√° tr·ªã',
      dataIndex: 'value',
      key: 'value',
    },
  ];

  const specData = Object.entries(product.specifications).map(([key, value], index) => ({
    key: index,
    label: key.replace(/([A-Z])/g, ' $1').charAt(0).toUpperCase() + key.replace(/([A-Z])/g, ' $1').slice(1),
    value: value,
  }));

  const ratingDistribution = [
    { stars: 5, count: 98, percentage: 63 },
    { stars: 4, count: 42, percentage: 27 },
    { stars: 3, count: 12, percentage: 8 },
    { stars: 2, count: 3, percentage: 2 },
    { stars: 1, count: 1, percentage: 0 },
  ];

  return (
    <div className={styles.container}>
      {/* Breadcrumb */}
      <Breadcrumb className={styles.breadcrumb}>
        <Breadcrumb.Item>
          <HomeOutlined onClick={() => navigate('/')} style={{ cursor: 'pointer' }} />
        </Breadcrumb.Item>
        <Breadcrumb.Item onClick={() => navigate('/products')} style={{ cursor: 'pointer' }}>
          S·∫£n ph·∫©m
        </Breadcrumb.Item>
        <Breadcrumb.Item>{product.brand}</Breadcrumb.Item>
        <Breadcrumb.Item>{product.name}</Breadcrumb.Item>
      </Breadcrumb>

      {/* Product Main Info */}
      <Card className={styles.mainCard}>
        <Row gutter={[32, 32]}>
          {/* Product Images */}
          <Col xs={24} md={10}>
            <div className={styles.imageSection}>
              <div className={styles.mainImage}>
                <Image
                  src={product.images[selectedImage]}
                  alt={product.name}
                  preview={{
                    src: product.images[selectedImage],
                  }}
                />
                {discount > 0 && (
                  <div className={styles.discountBadge}>-{discount}%</div>
                )}
                <div 
                  className={styles.membershipBadge}
                  style={{ background: membershipInfo.color }}
                >
                  <span>{membershipInfo.icon}</span> {product.tag}
                </div>
              </div>
              <div className={styles.thumbnails}>
                {product.images.map((img, index) => (
                  <div
                    key={index}
                    className={`${styles.thumbnail} ${selectedImage === index ? styles.activeThumbnail : ''}`}
                    onClick={() => setSelectedImage(index)}
                  >
                    <img src={img} alt={`${product.name} ${index + 1}`} />
                  </div>
                ))}
              </div>
            </div>
          </Col>

          {/* Product Details */}
          <Col xs={24} md={14}>
            <div className={styles.detailSection}>
              <div className={styles.brandTag}>
                <Tag color="blue">{product.brand}</Tag>
                {product.seller.verified && (
                  <Tag color="green" icon={<CheckCircleOutlined />}>
                    Ng∆∞·ªùi b√°n ƒë√£ x√°c th·ª±c
                  </Tag>
                )}
              </div>

              <Title level={2} className={styles.productName}>
                {product.name}
              </Title>

              <div className={styles.ratingSection}>
                <Rate disabled defaultValue={product.rating} allowHalf />
                <Text className={styles.ratingText}>
                  {product.rating} ({product.reviews} ƒë√°nh gi√°)
                </Text>
                <Divider type="vertical" />
                <Text className={styles.soldText}>ƒê√£ b√°n: {product.sold}</Text>
              </div>

              <div className={styles.priceSection}>
                <div className={styles.currentPrice}>
                  {product.price.toLocaleString('vi-VN')}‚Ç´
                </div>
                {product.originalPrice > product.price && (
                  <div className={styles.originalPrice}>
                    {product.originalPrice.toLocaleString('vi-VN')}‚Ç´
                  </div>
                )}
              </div>

              <Divider />

              {/* Key Specs */}
              <div className={styles.keySpecs}>
                <Row gutter={[16, 16]}>
                  <Col span={12}>
                    <div className={styles.specItem}>
                      <ThunderboltOutlined className={styles.specIcon} />
                      <div>
                        <Text type="secondary">Dung l∆∞·ª£ng</Text>
                        <div className={styles.specValue}>{product.specifications.capacity}</div>
                      </div>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div className={styles.specItem}>
                      <SafetyOutlined className={styles.specIcon} />
                      <div>
                        <Text type="secondary">ƒê·ªô kh·ªèe pin</Text>
                        <div className={styles.specValue}>{product.specifications.healthStatus}</div>
                      </div>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div className={styles.specItem}>
                      <CheckCircleOutlined className={styles.specIcon} />
                      <div>
                        <Text type="secondary">T√¨nh tr·∫°ng</Text>
                        <div className={styles.specValue}>{product.specifications.condition}</div>
                      </div>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div className={styles.specItem}>
                      <SafetyOutlined className={styles.specIcon} />
                      <div>
                        <Text type="secondary">B·∫£o h√†nh</Text>
                        <div className={styles.specValue}>{product.specifications.warranty}</div>
                      </div>
                    </div>
                  </Col>
                </Row>
              </div>

              <Divider />

              {/* Quantity & Actions */}
              <div className={styles.actionSection}>
                <div className={styles.quantitySection}>
                  <Text className={styles.quantityLabel}>S·ªë l∆∞·ª£ng:</Text>
                  <InputNumber
                    min={1}
                    max={product.stockQuantity}
                    value={quantity}
                    onChange={setQuantity}
                    className={styles.quantityInput}
                  />
                  <Text type="secondary">
                    {product.stockQuantity} s·∫£n ph·∫©m c√≥ s·∫µn
                  </Text>
                </div>

                <Space direction="vertical" size="middle" style={{ width: '100%' }}>
                  <Button
                    type="primary"
                    size="large"
                    icon={<ShoppingCartOutlined />}
                    onClick={handleAddToCart}
                    block
                    className={styles.addToCartBtn}
                  >
                    Th√™m v√†o gi·ªè h√†ng
                  </Button>
                  <Button
                    size="large"
                    onClick={handleBuyNow}
                    block
                    className={styles.buyNowBtn}
                  >
                    Mua ngay
                  </Button>
                  <Space size="middle" style={{ width: '100%', justifyContent: 'center' }}>
                    <Button icon={<HeartOutlined />}>Y√™u th√≠ch</Button>
                    <Button icon={<ShareAltOutlined />}>Chia s·∫ª</Button>
                  </Space>
                </Space>
              </div>

              {/* Shipping Info */}
              <div className={styles.shippingInfo}>
                <Title level={5}>Th√¥ng tin v·∫≠n chuy·ªÉn</Title>
                <Space direction="vertical" size="small">
                  {product.shipping.freeShipping && (
                    <Text>
                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />
                      Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn
                    </Text>
                  )}
                  <Text type="secondary">
                    Giao h√†ng t·ª´: {product.shipping.shippingFrom}
                  </Text>
                  <Text type="secondary">
                    Th·ªùi gian giao h√†ng: {product.shipping.estimatedDays}
                  </Text>
                </Space>
              </div>
            </div>
          </Col>
        </Row>
      </Card>

      {/* Seller Info Card */}
      <Card className={styles.sellerCard}>
        <Row align="middle" gutter={[16, 16]}>
          <Col>
            <Avatar size={64} icon={<UserOutlined />} />
          </Col>
          <Col flex="auto">
            <div>
              <Title level={4} style={{ margin: 0 }}>
                {product.seller.name}
                {product.seller.verified && (
                  <CheckCircleOutlined style={{ color: '#52c41a', marginLeft: 8 }} />
                )}
              </Title>
              <Space size="large">
                <Text type="secondary">
                  <Rate disabled defaultValue={product.seller.rating} style={{ fontSize: 14 }} /> {product.seller.rating}
                </Text>
                <Text type="secondary">{product.seller.products} s·∫£n ph·∫©m</Text>
                <Text type="secondary">{product.seller.followers} ng∆∞·ªùi theo d√µi</Text>
              </Space>
            </div>
          </Col>
          <Col>
            <Space>
              <Button>Xem shop</Button>
              <Button type="primary">Theo d√µi</Button>
            </Space>
          </Col>
        </Row>
      </Card>

      {/* Detailed Information Tabs */}
      <Card className={styles.detailTabs}>
        <Tabs defaultActiveKey="1" size="large">
          {/* Description Tab */}
          <TabPane tab="M√¥ t·∫£ s·∫£n ph·∫©m" key="1">
            <div className={styles.tabContent}>
              <Paragraph className={styles.description}>
                {product.description}
              </Paragraph>

              <Title level={4}>T√≠nh nƒÉng n·ªïi b·∫≠t</Title>
              <List
                dataSource={product.features}
                renderItem={(item) => (
                  <List.Item>
                    <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />
                    {item}
                  </List.Item>
                )}
              />

              <Divider />

              <Title level={4}>·ª®ng d·ª•ng</Title>
              <List
                grid={{ gutter: 16, xs: 1, sm: 2, md: 2, lg: 3 }}
                dataSource={product.applications}
                renderItem={(item) => (
                  <List.Item>
                    <Card size="small">
                      <CheckCircleOutlined style={{ color: '#1890ff', marginRight: 8 }} />
                      {item}
                    </Card>
                  </List.Item>
                )}
              />
            </div>
          </TabPane>

          {/* Specifications Tab */}
          <TabPane tab="Th√¥ng s·ªë k·ªπ thu·∫≠t" key="2">
            <div className={styles.tabContent}>
              <Table
                columns={specColumns}
                dataSource={specData}
                pagination={false}
                bordered
                size="middle"
              />
            </div>
          </TabPane>

          {/* Warranty Tab */}
          <TabPane tab="B·∫£o h√†nh & V·∫≠n chuy·ªÉn" key="3">
            <div className={styles.tabContent}>
              <Title level={4}>Ch√≠nh s√°ch b·∫£o h√†nh</Title>
              <Paragraph>
                <strong>Th·ªùi gian b·∫£o h√†nh:</strong> {product.warranty.period}
              </Paragraph>
              <Paragraph>
                <strong>B·∫£o h√†nh bao g·ªìm:</strong>
              </Paragraph>
              <List
                dataSource={product.warranty.coverage}
                renderItem={(item) => (
                  <List.Item>
                    <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />
                    {item}
                  </List.Item>
                )}
              />
              <Paragraph>
                <strong>Kh√¥ng b·∫£o h√†nh:</strong>
              </Paragraph>
              <List
                dataSource={product.warranty.notCovered}
                renderItem={(item) => (
                  <List.Item>
                    <Text type="danger">‚úï {item}</Text>
                  </List.Item>
                )}
              />

              <Divider />

              <Title level={4}>Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn</Title>
              <List
                dataSource={product.shipping.methods}
                renderItem={(item) => (
                  <List.Item>
                    <CheckCircleOutlined style={{ color: '#1890ff', marginRight: 8 }} />
                    {item}
                  </List.Item>
                )}
              />
            </div>
          </TabPane>

          {/* Reviews Tab */}
          <TabPane tab={`ƒê√°nh gi√° (${product.reviews.length})`} key="4">
            <div className={styles.tabContent}>
              <Row gutter={[32, 32]}>
                <Col xs={24} md={8}>
                  <div className={styles.ratingOverview}>
                    <div className={styles.ratingScore}>
                      <div className={styles.scoreNumber}>{product.rating}</div>
                      <Rate disabled defaultValue={product.rating} allowHalf />
                      <Text type="secondary">{product.reviews.length} ƒë√°nh gi√°</Text>
                    </div>
                    <Divider />
                    {ratingDistribution.map((item) => (
                      <div key={item.stars} className={styles.ratingBar}>
                        <Text>{item.stars} ‚≠ê</Text>
                        <Progress
                          percent={item.percentage}
                          strokeColor="#fadb14"
                          showInfo={false}
                        />
                        <Text type="secondary">{item.count}</Text>
                      </div>
                    ))}
                  </div>
                </Col>
                <Col xs={24} md={16}>
                  <List
                    itemLayout="vertical"
                    dataSource={product.reviews}
                    renderItem={(review) => (
                      <List.Item
                        actions={[
                          <Text key="helpful">üëç H·ªØu √≠ch ({review.helpful})</Text>,
                        ]}
                      >
                        <List.Item.Meta
                          avatar={<Avatar icon={<UserOutlined />} />}
                          title={
                            <Space>
                              <Text strong>{review.userName}</Text>
                              <Rate disabled defaultValue={review.rating} style={{ fontSize: 14 }} />
                            </Space>
                          }
                          description={<Text type="secondary">{review.date}</Text>}
                        />
                        <Paragraph>{review.content}</Paragraph>
                        {review.images && (
                          <Space>
                            {review.images.map((img, idx) => (
                              <Image key={idx} src={img} width={100} />
                            ))}
                          </Space>
                        )}
                      </List.Item>
                    )}
                  />
                </Col>
              </Row>
            </div>
          </TabPane>
        </Tabs>
      </Card>

      {/* Related Products */}
      <Card title="S·∫£n ph·∫©m li√™n quan" className={styles.relatedProducts}>
        <Row gutter={[16, 16]}>
          {product.relatedProducts.map((item) => (
            <Col key={item.id} xs={12} sm={8} md={6}>
              <Card
                hoverable
                cover={<img alt={item.name} src={item.image} />}
                onClick={() => navigate(`/product/${item.id}`)}
              >
                <Card.Meta
                  title={item.name}
                  description={
                    <>
                      <div className={styles.relatedPrice}>
                        {item.price.toLocaleString('vi-VN')}‚Ç´
                      </div>
                      <Rate disabled defaultValue={item.rating} style={{ fontSize: 12 }} />
                    </>
                  }
                />
              </Card>
            </Col>
          ))}
        </Row>
      </Card>
    </div>
  );
};

export default ProductDetailPage;
